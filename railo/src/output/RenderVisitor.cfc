import craft.content.Composite;
import craft.content.Document;
import craft.content.Layout;
import craft.content.Leaf;
import craft.content.Placeholder;
import craft.content.Section;
import craft.content.Visitor;

import craft.request.Context;

component implements="Visitor" {

	public void function init(required Context context, required ViewFinder viewFinder) {

		variables._context = arguments.context
		variables._viewFinder = arguments.viewFinder

		// Define state. The following state variables will be modified during component traversal.
		// The sections in document instances are kept, so that placeholder instances can pick them up.
		variables._sections = {}
		// Generated content. At the end of the process, this variable contains the request content.
		variables._content = null
		// Content generated by child components. This content is converted to the appropriate content type.
		variables._contents = []

	}

	public Any function content() {
		return variables._content;
	}

	public void function visitComposite(required Composite composite) {

		// Keep state in local variables.
		var contents = variables._contents

		var model = arguments.composite.model(variables._context)

		var viewName = null
		if (contents !== null) {
			viewName = arguments.composite.view(variables._context)

			// Overwrite state. Set _contents to null if there is no view defined.
			// As a consequence, children will not be rendered either.
			variables._contents = viewName !== null ? [] : null
		}

		// During traversal, the contents of the children will be appended to the _contents array.
		arguments.composite.traverse(this)

		if (contents !== null && viewName !== null) {
			// Put the content of the children on the model so the view can include it.
			model.__content__ = variables._contents
			var view = variables._viewFinder.get(viewName)
			variables._content = view.render(model)
			// Append the generated content on the 'parent' _contents array.
			contents.append(variables._content)
		}

		// Revert state.
		variables._contents = contents

	}

	public void function visitDocument(required Document document) {

		// Pick up the sections / placeholders that this document is filling.
		variables._sections.append(arguments.document.sections())

		arguments.document.layout().accept(this)
	}

	public void function visitLayout(required Layout layout) {
		arguments.layout.section().accept(this)
	}

	public void function visitLeaf(required Leaf leaf) {

		var model = arguments.leaf.model(variables._context)

		// If _contents is null, rendering the view is useless.
		if (variables._contents !== null) {
			var viewName = arguments.leaf.view(variables._context)
			if (viewName !== null) {
				var view = variables._viewFinder.get(viewName)

				variables._content = view.render(model)
				variables._contents.append(variables._content)
			}
		}

	}

	public void function visitPlaceholder(required Placeholder placeholder) {

		// The placeholder is filled if its ref exists as a key in the sections struct.
		var ref = arguments.placeholder.ref()

		if (variables._sections.keyExists(ref)) {
			variables._sections[ref].accept(this)
		}

	}

	public void function visitSection(required Section section) {

		// A section is like a composite without a view, so the reasoning is the same.
		var contents = variables._contents
		variables._contents = []

		arguments.section.traverse(this)

		/*
			Place the content produced by the components in the section in variables._content.
			The section has no view that can combine complex content, so we handle only the following
			cases:
			- If there is no content item, we set variables._content to null.
			- If there is one content item, no combination is needed and we can place the one
				element in variables._content.
			- If all contents are strings, concatenate them. This is justified because the section
				is primarily intended for html output.
			- Otherwise content will be lost, and we throw an exception.
		*/
		if (variables._contents.isEmpty()) {
			variables._content = null
		} else if (variables._contents.len() == 1) {
			variables._content = variables._contents[1]
		} else if (variables._contents.every(function (content) {
			return IsSimpleValue(arguments.content) || arguments.content === null;
		})) {
			variables._content = variables._contents.toList("")
		} else {
			Throw("Cannot render content", "DatatypeConfigurationException", "If multiple components generate complex content, the section cannot render.")
		}

		// Append the generated content on the 'parent' _contents array.
		contents.append(variables._content)

		// Revert state.
		variables._contents = contents

	}

}